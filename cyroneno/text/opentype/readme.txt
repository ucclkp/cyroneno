TrueType 基础
https://docs.microsoft.com/zh-cn/typography/opentype/spec/ttch01

OpenType 字体是对 TrueType 字体文件格式的扩展。

本章介绍创建和呈现 TrueType 字体，或者包含 TrueType 轮廓数据的 OpenType 字体。首先介绍从纸面设计到创建出能够发送给输出设备的位图
的步骤。

一、从设计到字体文件
TrueType 字体可由纸面或计算机屏幕设计创建。TrueType 字体也可以由其他字体转换而来。不管是哪一种情况，TrueType 字体文件均使用
TrueType 格式描述每个字形的轮廓。


二、从字体文件到纸面
本节描述了将字形从 TrueType 字体文件中显示在光栅设备上的过程。

首先，位于字体文件中的轮廓被缩放至指定大小。一旦缩放完成，组成轮廓的点不再由 FUnit，这一描述原始轮廓的单位来表示，而由设备特定的
像素坐标来表示。

接着，和该字形关联的指令将由解释器执行。指令执行的结果是一个经网格适配（grid-fitted）后的轮廓。这个轮廓之后将进行扫描转换来产生
可以被渲染至目标设备的位图。

 1. 从 TrueType 文件中找到指定的字形轮廓，由 FUnit 表示
 2. 缩放器将 FUnit 转换至像素坐标，并将轮廓缩放至指定大小
 3. 解释器执行和字形关联的指令
 4. 扫描转换器指定哪个像素打开
 5. 将位图渲染至光栅设备


三、将设计数字化
本节描述了用于建立一个定义了字形轮廓的点的位置的坐标系统。

1. 轮廓（Outline）
在 TrueType 字体中，字形的形状由它们的轮廓描述。一个字形轮廓由一系列的等高线（contours）构成。一个简单的字形可能只有一条等高线。
更复杂的字形可以有两条或更多的等高线。组合字形（Composite glyphs）可由两个或多个更简单字形组成。一些不可见的控制字符将被映射到
无等高线的字形。

等高线由一些直线和曲线组成。曲线由描述二阶贝塞尔样条的一系列点组成。TrueType 贝塞尔样条格式使用两种类型的点定义曲线：曲线上的点和
不在曲线上的点。定义曲线时，任意两种点的组合都是可接受的。直线由两个连续不断的曲线上点定义。

组成曲线的点的编号顺序必须是连续的。编号的增加或减小决定了组成字形的形状的填充模式。如果沿着曲线点编号增加的方向行进，填充区将总是
在右边。

2. FUnits 和 em square
在 TrueType 字体文件中，点的位置由字体单位，或者叫 FUnits 决定。一个 FUnits 是 em square 中的最小可测量单位。em square 是一个
想象中的，用于指定字形大小和对齐的矩形格。em square 的大小通常是字体的体高（full body height）加上一些额外的空间来避免在无额外前导
（extra leading）排版时不同行的文字重叠在一起。

在金属活字时代，字形不能超出 em square，不过数字印刷字体则没有这个限制。 em square 可以足够大来包含适每一个字形，包括带标记的字形。
或者，如果方便的话，字形的一部分可以超出 em square。TrueType 字体可以支持这种方法，最终由字体厂商决定。

em square 定义了一个二维坐标网格，x 轴描述了水平方向的移动，y轴描述了竖直方向的移动。这将在之后的节中讨论更多细节。

3. FUnits 和 网格（grid）
数字化一个字体的的一个关键点是决定组成字形轮廓的点在哪个分辨率下描述。点代表了网格中的位置，网格的最小可定位单位是 FUnit 或字体单位。
网格是一个二维坐标系统，其 x 轴描述了沿水平方向的移动，y 轴描述了沿竖直方向的移动。网格原点为 (0, 0)。网格并非无限大的平面。每个点
必须在 -16384 到 +16383 FUnits 之间。根据选择的分辨率，可寻址网格位置的范围可能会更小。

坐标网格的粒度选择，即是说，每 em 的单位数量（upem），是由字体厂商决定的。如果每 em 单位是 2 的幂，例如 2048，轮廓缩放此时是最快的。

em square 的原点不需要与字形轮廓有任何固定的关系。然而实际上，对于一个字体，应用程序依赖一些字形的坐标位置方面的惯例。对于罗马字体，
其设计上为水平布局，y 坐标位置为 0 的位置假设为字体的基线位置。x 坐标为 0 的位置没有特定的意义，但生产商可能为了提升应用程序的性能而
以该位置作为标准。

举个例子，你可以放置一个字形以使其美学中心位于 x=0 的位置。这样，一套如此放置的字形位于同一列时，这一列上的所有字形都将很好地居中。
这种放置方式一般用于汉字或任何能够竖向排版的字体。其他的选择是将每一个字形最左端的轮廓点的 x 坐标设置为字形的左轴承值。以这种方式创建
的字体可以让一些应用程序更快地用 PostScript 打印机打印。

非罗马字体可能会使用其他的惯例。对于想要呈现出最佳高亮和光标的情况，字形应该粗略地居中于宽步进中。举个例子，对称字符具有相等的左轴承
和右轴承。

em square 的粒度由每 em 的 FUnits 数或更简单的，每 em 的单位数。由 FUnits 分割的 em square 定义了一个坐标系统，其中的一个单位等于
一个 FUnit。定义在这个坐标系统中的所有点必须有整数位置。每 em 的单位数越多，在 em square 中的定位精度就越高。

FUnits 是相对单位，因为它的大小因 em square 的大小变化而变化。每 em 的单位数对于一个给定的字体是常数，而与字体大小无关。然而，每 em
的点数与字形的大小有关。当一个字形按 9 点显示时，em square 为 9 点高；按 10 点显示时为 10 点高，等等。因为每 em 的单位数不随字体
显示的点数大小变化而变化，因此一 FUnit 的绝对大小随点数大小变化而变化。

因为 FUnits 相对于 em square，一个字形中的给定位置具有相同的 FUnits 坐标，而不随字体的渲染大小变化而变化。这很方便，因为只需构建
轮廓点一次，之后只需变换构建出的字形即可应用各种大小的变化。


四、缩放一个字形
本节描述了字形轮廓是如何从字体文件中的主字体缩放为应用程序要求的大小。

1. 设备空间
不管定义一个字形轮廓的 em square 的分辨率如何，在字形显示之前必须进行缩放来匹配大小，变换和输出设备的特性。缩放后的轮廓必须以反映
绝对位置的单位描述，而非测量时的相对系统。这种情况下，构成字形轮廓的点由像素描述。

直观上，像素是屏幕和打印机的实际输出。为了达到更精确管理轮廓的目的，TrueType 将像素坐标描述为最接近像素的六十四分之一。

2. 将 FUnits 转换为像素
em square 中的值乘以一个缩放值可以转换到像素设备坐标系统。这个缩放值是：

  点大小 * 分辨率 / (72 点每英寸 * 每 em 单位数)

其中点大小是指字形将要显示的大小，分辨率是指输出设备的分辨率。分母中的 72 是指每英寸的点数。

例如，假设一个字形特性为：长 550 FUnits，在 72 dpi 屏幕上显示 18 点大小。每 em 的单位数有 2048。下面的计算得出了缩放值为 4.83：

  550 * 18 * 72 / (72 * 2048) = 4.83

3. 显示设备特性
任何特定显示设备的分辨率由每英寸显示的的点（dot）或像素数（dpi）决定。例如，Windows 下的 VGA 是一个 96 dpi 设备，大部分激光打印机
的分辨率有 300 dpi。一些设备，比如 EGA，在水平和竖直方向上有不同的分辨率（换句话说，非正方形像素）。EGA 具有 96 x 72 的分辨率，
这种情况下，水平方向的每英寸点数必须和竖直方向的每英寸点数区分开来。

每 em 的像素数依赖输出设备的分辨率。一个 18 点字体在一个 72 dpi 的设备上将会有每 em 18 像素。将分辨率改为 300 dpi 的话，将有 75
像素，1200dpi 的话将有 300 像素。

特定点数在不同设备显示不同的这一事实产生出了一种有效的度量方法：每 em 像素数（ppem）。计算公式为：

  ppem = 点大小 * dpi / 72
       = 每英寸像素数 * 每 pica point 英寸数 * 每 em pica point 数
       = dpi * 1/72 * 点大小

在一个 300dpi 的激光打印机上，一个 12 点字形有 12*300/72 或 50 ppem。在 2400dpi 的排字机上，则有 12*2400/72 或 400 ppem。
在一个 VGA 设备上，12 点字形有 12*96/72 或 16ppem。类似的， 在 72dpi 设备上的 12 点字符的 ppem 为 12*72/72，或 12。最后一次计算
点出了一个规则：在任何 72dpi 设备上，点和每 em 像素相等。然而要注意，在传统的排版中，一英寸包含 72.2752 个点（而不是 72）。就是说，
一点等于 0.013836 英寸。

如果你知道 ppem，在 FUnits 和像素空间坐标之间的转换公式为：

  像素坐标 = em 坐标 * ppem / upem

em 坐标 (1024, 0) 可转换为设备像素坐标 (6, 0)，在 2048 单位每 em，和 12 像素每 em。


五、对字形轮廓做网格匹配
制备一个字形的基础工作是识别原始设计的关键特性，并且使用指令确保这些特性在不同字形大小和渲染到不同设备上时得以保留。固定主干（stem）
权重，固定颜色，平均空格以及像素丢弃的消除均为主要目标。

为了实现这些目标，有必要确保当字形在光栅化时打开正确的像素。这些打开的像素将创建字形的位图。因为字形轮廓的形状决定了哪些像素将组成
指定大小的字符的位图，有时有必要改变或扭曲原始轮廓来产生高质量的图片。这种对轮廓的变形称为网格匹配。

